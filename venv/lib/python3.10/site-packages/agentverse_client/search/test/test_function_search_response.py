# coding: utf-8

"""
    FastAPI

    An API for our smart search engine that provides the agent that best fits your needs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from agentverse_client.search.models.function_search_response import FunctionSearchResponse

class TestFunctionSearchResponse(unittest.TestCase):
    """FunctionSearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FunctionSearchResponse:
        """Test FunctionSearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FunctionSearchResponse`
        """
        model = FunctionSearchResponse()
        if include_optional:
            return FunctionSearchResponse(
                functions = [
                    agentverse_client.search.models.function.Function(
                        id = '', 
                        type = null, 
                        name = '', 
                        agent = '', 
                        description = '', 
                        is_primary = True, 
                        groups = [
                            ''
                            ], 
                        total_interactions = 56, 
                        recent_interactions = 56, 
                        rating = 1.337, 
                        featured = True, 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                offset = 56,
                limit = 56,
                num_hits = 56,
                total = 56
            )
        else:
            return FunctionSearchResponse(
                offset = 56,
                limit = 56,
                num_hits = 56,
                total = 56,
        )
        """

    def testFunctionSearchResponse(self):
        """Test FunctionSearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
